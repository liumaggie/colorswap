{"version":3,"sources":["webpack:///webpack/bootstrap 8521e0e2c0b883752b6e","webpack:///./lib/colorswap.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/player.js","webpack:///./lib/obstacle.js","webpack:///./lib/arc.js","webpack:///./lib/util.js","webpack:///./lib/rectangle.js","webpack:///./lib/line.js","webpack:///./lib/circle.js","webpack:///./lib/triangle.js","webpack:///./lib/color_spinner.js","webpack:///./lib/star.js","webpack:///./lib/double_circle.js","webpack:///./lib/line_obstacle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;ACrNA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,KAAK;AACL,2BAA2B,oBAAoB;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD,qCAAqC,oBAAoB;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;AC7HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AChEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AC5CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;ACxBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AC/BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;ACvBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;ACtBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8521e0e2c0b883752b6e","const Game = require('./game');\nconst GameView = require('./game_view');\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvas = document.getElementById(\"game-canvas\");\n\n  window.highestScore = 0;\n  const ctx = canvas.getContext(\"2d\");\n  const game = new Game();\n  new GameView(game, ctx).start();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/colorswap.js\n// module id = 0\n// module chunks = 0","const Player = require('./player');\nconst Obstacle = require('./obstacle');\nconst Rectangle = require('./rectangle');\nconst Circle = require('./circle');\nconst Triangle = require('./triangle');\nconst DoubleCircle = require('./double_circle');\nconst ColorSpinner = require('./color_spinner');\nconst Star = require('./star');\nconst LineObstacle = require('./line_obstacle');\nconst Util = require('./util');\n\nclass Game {\n  constructor() {\n    this.player = new Player(Game.width, Game.height);\n    this.centerX = Game.width/2;\n    this.centerY = 0;\n    this.radius = 100;\n    this.obsDistance = Game.height/4;\n    this.collided = this.collided.bind(this);\n    // game start when player reaches half the height of canvas\n    this.started = false;\n    this.score = 0;\n    this.gameover = false;\n  }\n\n  addFirstObstacles() {\n    const firstCircle = new LineObstacle(Game.width/2, Game.height/3, this.radius);\n    const firstStar = new Star(Game.width/2, Game.height/3);\n    this.obstacles = [ firstCircle, firstStar ];\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = \"#292929\";\n    ctx.fillRect(0, 0, Game.width, Game.height);\n    this.drawScore(ctx);\n    this.obstacles.forEach((obstacle) => {\n      obstacle.draw(ctx);\n    });\n    this.player.draw(ctx);\n  }\n\n  drawScore(ctx) {\n    ctx.font = \"100px Arial\";\n    ctx.fillStyle = '#ffffff';\n    ctx.fillText(`${this.score}`, 30, 100);\n  }\n\n  shiftObstacles() {\n    this.obstacles.forEach((obstacle) => {\n      if (this.player.y < 2*Game.height/3) {\n        obstacle.shift(this.player);\n      }\n    });\n  }\n\n  addStar(x, y) {\n    this.obstacles.push(new Star(x, y));\n  }\n\n  addObstacles() {\n    // checks to see that player is in first obstacle\n    // player can fall out of the obstacle and lose\n    if (this.player.y < Game.height/2) { this.started = true; }\n    if (this.obstacles.length <= 3) {\n      this.addSpinner();\n      const randomObs = this.selectRandomObstacle();\n      const newObs = this.createObstacle(randomObs);\n      this.addObstacle(newObs);\n      this.addStar(newObs.x, newObs.y);\n    }\n    this.removeObstacle();\n  }\n\n  selectRandomObstacle() {\n    const obs = ['circle', 'rectangle', 'triangle', 'doubleCircle'];\n    const randomObs = obs[Math.floor(Math.random() * obs.length)];\n    return randomObs;\n  }\n\n  findNewCenterY() {\n    const lastObs = this.obstacles[this.obstacles.length - 1];\n    return lastObs.y - this.obsDistance;\n  }\n\n  createObstacle(result) {\n    let newObs;\n    const newCenterY = this.findNewCenterY();\n    if (result === 'circle') {\n      newObs = new Circle(this.centerX, newCenterY, this.radius);\n    } else if (result === 'rectangle') {\n      newObs = new Rectangle(this.centerX, newCenterY, this.radius);\n    } else if (result === 'triangle') {\n      newObs = new Triangle(this.centerX, newCenterY, this.radius, this.player.color);\n    } else if (result === 'doubleCircle') {\n      newObs = new DoubleCircle(this.centerX, newCenterY, this.radius, this.player.color)\n    }\n    return newObs;\n  }\n\n  addSpinner() {\n    const newCenterY = this.findNewCenterY();\n    this.obstacles.push(new ColorSpinner(this.centerX, newCenterY, 5, true));\n  }\n\n  addObstacle(obs) {\n    this.obstacles.push(obs);\n  }\n\n  removeObstacle() {\n    const firstObs = this.obstacles[0];\n    if (firstObs.y >= Game.height) {\n      if (firstObs instanceof ColorSpinner) {\n        this.obstacles.shift();\n      } else {\n        this.obstacles.shift();\n      }\n    }\n  }\n\n  moveObstacles() {\n    this.obstacles.forEach((obstacle) => {\n      if (!(obstacle instanceof Star)) {\n        obstacle.move();\n      }\n    });\n  }\n\n  remove(obstacle) {\n    const idx = this.obstacles.indexOf(obstacle);\n    this.obstacles.splice(idx, 1);\n  }\n\n  selectRandomColor(obstacle) {\n    let colors;\n    if (obstacle instanceof DoubleCircle) {\n      colors = [Util.colors().purple, Util.colors().yellow]\n    } else {\n      colors = Util.colorsToArray();\n    }\n    let randomColor = colors[Math.floor(Math.random() * colors.length)];\n    while (this.player.color === randomColor) {\n      randomColor = colors[Math.floor(Math.random() * colors.length)];\n    }\n    console.log(colors, randomColor)\n    return randomColor;\n  }\n\n\n  // finds double circle idx after spinner in the obstacles array so the\n  // player's color can match the top and bottom circle color (purple/yellow)\n  findDoubleCircle(spinner) {\n    const spinnerIdx = this.obstacles.indexOf(spinner);\n    const idx = this.obstacles.indexOf(DoubleCircle);\n    if (spinnerIdx + 1 === idx) {\n      return this.obstacles[idx];\n    }\n  }\n\n  collided() {\n    this.obstacles.forEach((obstacle) => {\n      if (obstacle instanceof ColorSpinner) {\n        if (this.collideWith(obstacle, true)) {\n          const doubleCircle = this.findDoubleCircle(obstacle);\n          this.player.color = this.selectRandomColor(doubleCircle);\n          this.remove(obstacle);\n        }\n      } else if (obstacle instanceof Star) {\n        if (obstacle.collision(this.player)) {\n          this.score += 1;\n          this.remove(obstacle);\n        }\n      } else {\n        if (this.collideWith(obstacle)) {\n          this.gameover = true;\n        }\n      }\n    });\n  }\n\n  collideWith(obstacle, spinner) {\n    let collided = false;\n    let spinnerPresent = spinner;\n    const obs = obstacle.arcs ? obstacle.arcs : obstacle.lines;\n    obs.forEach((segment, spinnerPresent) => {\n      if (segment.collision(this.player, spinner)) {\n        collided = true;\n      }\n    });\n    return collided;\n  }\n\n  playerFall(time) {\n    if (this.player.moving) { this.player.checkMove(); };\n    if (this.started && this.player.falling) {\n      this.player.fall(time, true);\n    } else if (this.player.falling) {\n      this.player.fall(time, false);\n    }\n  }\n\n  checkIfPlayerFell() {\n    // if (this.player.falling) { this.playerFall()};\n    if (this.player.y > Game.height) {\n      this.gameover = true;\n    }\n  }\n\n}\n\nGame.width = 600;\nGame.height = 700;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const Circle = require('./circle');\nconst Game = require('./game');\n\nwindow.highestScore = 0;\n// localStorage.setItem('highestScore', JSON.stringify(window.highestScore));\n\nclass GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n    this.circle1 = new Circle(Game.width/2 - 85, 80, 40);\n    this.circle2 = new Circle(Game.width/2 + 85, 80, 40);\n    this.circle3 = new Circle(Game.width/2, Game.height/2 + 40, 100);\n    this.circle4 = new Circle(Game.width/2, Game.height/2 + 40, 120, false, -0.03);\n    this.circle5 = new Circle(Game.width/2, Game.height/2 + 40, 80, false, -0.03);\n    this.circles = [this.circle1, this.circle2, this.circle3, this.circle4, this.circle5];\n    this.onSplash = true;\n    this.startGame = this.startGame.bind(this);\n    this.addClickOnSplash = this.addClickOnSplash.bind(this);\n    this.movePlayer = this.movePlayer.bind(this);\n  }\n\n  start() {\n    this.elapsedTime = 0;\n    this.splash();\n    this.addClickOnSplash();\n  }\n\n  splash() {\n    const img = new Image();\n    img.onload = () => {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      this.ctx.drawImage(img, 1, 1);\n      this.drawBestScore();\n    };\n    img.src = './images/splash.png';\n\n    this.drawCircle();\n  }\n\n  drawBestScore() {\n    this.ctx.font = \"30px Arial\";\n    this.ctx.fillStyle = '#35E2F2';\n    if (window.highestScore < 10) {\n      this.ctx.fillText(`${window.highestScore}`, Game.width/2 - 6, Game.height/2 + 80);\n    } else {\n      this.ctx.fillText(`${window.highestScore}`, Game.width/2 - 12, Game.height/2 + 80);\n    }\n  }\n\n  addClickOnSplash() {\n    this.ctx.canvas.addEventListener(\"mousedown\", this.startGame);\n  }\n\n  drawCircle() {\n    this.circles.forEach((circle) => {\n      circle.move();\n      circle.draw(this.ctx);\n    });\n    if (this.onSplash) {\n      requestAnimationFrame(this.drawCircle.bind(this));\n    }\n  }\n\n  movePlayer() {\n    this.game.player.move();\n  }\n\n  addMoveListener() {\n    this.ctx.canvas.addEventListener(\"mousedown\", this.movePlayer);\n  }\n\n  startGame() {\n    this.game.gameover = false;\n    this.onSplash = false;\n    this.ctx.canvas.removeEventListener(\"mousedown\", this.startGame);\n    this.addMoveListener();\n    this.game.addFirstObstacles();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  createNewGame() {\n    const game = new Game();\n    new GameView(game, this.ctx).start();\n  }\n\n  lossSplash() {\n    this.ctx.fillStyle = \"#ffffff\";\n    this.ctx.fillRect(0, Game.height/3, Game.width, Game.height/4);\n    this.ctx.font = \"30px Arial\";\n    this.ctx.fillStyle = \"#8D13FC\";\n    this.ctx.fillText(\"You Lose!\", Game.width/3 + 40, Game.height/2 - 60);\n    this.ctx.fillText(`Your Score: ${this.game.score}`, Game.width/3 + 15, Game.height/2 - 20);\n    this.ctx.fillText(`Best Score: ${window.highestScore}`, Game.width/3 + 15, Game.height/2 + 20);\n    setTimeout(() => this.createNewGame(), 5000);\n  }\n\n  checkScore() {\n    if (this.game.score > window.highestScore) {\n      window.highestScore = this.game.score;\n      // localStorage.setItem('highestScore', JSON.stringify(window.highestScore));\n    }\n  }\n\n  animate(time) {\n    const timeDelta = time - this.elapsedTime;\n    if (this.game.gameover === true) {\n      this.checkScore();\n      this.ctx.canvas.removeEventListener(\"mousedown\", this.movePlayer);\n      setTimeout(() => this.lossSplash(), 100);\n    } else {\n      this.game.addObstacles();\n      this.game.moveObstacles();\n      this.game.shiftObstacles();\n      this.game.collided();\n      this.game.playerFall(timeDelta);\n      this.elapsedTime = time;\n      this.game.checkIfPlayerFell();\n      this.game.draw(this.ctx);\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n}\n\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 2\n// module chunks = 0","const Util = require('./util');\n\nclass Player {\n  constructor(width, height) {\n    this.gameWidth = width;\n    this.gameHeight = height;\n    // initial position of player\n    this.x = this.gameWidth/2;\n    this.y = this.gameHeight-this.gameHeight/5;\n    this.radius = 10;\n    const colors = Util.colorsToArray();\n    this.color = colors[Math.floor(Math.random() * colors.length)];\n    this.moving = false;\n    this.falling = false;\n    this.moveVel = 0;\n    this.fallVel = 0;\n  }\n\n  move() {\n    this.fallVel = 0;\n    this.moving = true;\n    this.moveVel = 8;\n  }\n\n  checkMove() {\n    this.y = this.y - this.moveVel;\n    this.moveVel -= 1;\n    if (this.moveVel === 0) {\n      this.falling = true;\n      this.moving = false;\n      this.fallVel = 1;\n    }\n  }\n\n  fall(time, gameStarted) {\n    this.y += this.fallVel\n    this.fallVel += 0.1;\n    if (gameStarted === false) {\n      if (this.y >= this.gameHeight - this.gameHeight/5) {\n        // stop the falling\n        this.falling = false;\n      }\n    }\n  }\n\n  draw(ctx) {\n    ctx.save();\n    // creates shadow when jumping\n    if (this.y < this.gameHeight-this.gameHeight/5) {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y - 10, this.radius, 0, Math.PI * 2, true);\n      ctx.fillStyle = this.color;\n      ctx.fill();\n      ctx.globalAlpha = 0.4;\n    }\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.restore();\n  }\n\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 3\n// module chunks = 0","const Arc = require('./arc');\nconst Util = require('./util');\nconst Line = require('./line');\n\nclass Obstacle {\n  constructor(centerX, centerY, radius) {\n    this.x = centerX;\n    this.y = centerY;\n    this.radius = radius;\n    this.rotatingAngle = 0.02;\n  }\n\n  createLine(start, end, color) {\n    return new Line(this.x, this.y, this.radius, start, end, color, this.rotatingAngle);\n  }\n\n  createArc(start, end, color) {\n    return new Arc(this.x, this.y, this.radius, start, end, color, this.rotatingAngle);\n  }\n\n  shift(player) {\n    this.y += player.moveVel * 0.8;\n    if (this.arcs) {\n      this.arcs.forEach((arc) => {\n        arc.center = [this.x, this.y];\n      });\n    } else if (this.lines) {\n      this.lines.forEach((line) => {\n        line.center = [this.x, this.y];\n      });\n    }\n  }\n\n  move() {\n    const segments = this.arcs ? this.arcs : this.lines;\n    segments.forEach((segment) => {\n      segment.rotate();\n      if (this.lines) {\n        segment.calculateStart();\n      }\n    });\n  }\n}\n\nmodule.exports = Obstacle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/obstacle.js\n// module id = 4\n// module chunks = 0","const Util = require('./util');\n\nclass Arc {\n  constructor(x, y, radius, start, end, color, angle) {\n    this.center = [x, y];\n    this.radius = radius;\n    // arc angles\n    this.start = start;\n    this.end = end;\n    this.color = color;\n    this.rotatingAngle = angle;\n  }\n\n  edgeDetection(playerYTop, playerYBottom, circleY) {\n    return (Util.edgeDetection(playerYTop, circleY) ||\n        Util.edgeDetection(playerYBottom, circleY));\n  }\n\n  checkCollision(angle, circleY, player) {\n    // arc positions\n    this.adjustedStart = this.start % (2*Math.PI);\n    this.adjustedEnd = this.end % (2*Math.PI);\n\n    const playerYTopCoord = player.y - player.radius;\n    const playerYBottomCoord = player.y + player.radius;\n\n    if (this.adjustedStart > angle && angle > this.adjustedEnd &&\n      this.color !== player.color &&\n      this.edgeDetection(playerYTopCoord, playerYBottomCoord, circleY)) {\n        return true;\n      }\n    return false;\n  }\n\n  collision(player, spinner) {\n    // y coordinate collision with player\n    // debugger\n    this.yAtCircleBottom = Util.pointOnCircle(this.center, this.radius, Math.PI/2)[1];\n    this.yAtCircleTop = Util.pointOnCircle(this.center, this.radius, 3*Math.PI/2)[1];\n\n    // checks for top and bottom collision\n    if (spinner === true) {\n      return this.edgeDetection(player.y - player.radius, player.y + player.radius, this.yAtCircleBottom);\n    } else {\n      if (this.checkCollision(3*Math.PI/2, this.yAtCircleTop, player) ||\n      (this.checkCollision(Math.PI/2, this.yAtCircleBottom, player))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  rotate() {\n    this.start += this.rotatingAngle;\n    this.end += this.rotatingAngle;\n  }\n\n  draw(ctx, spinner) {\n    ctx.beginPath();\n    if (spinner) {\n      ctx.arc(this.center[0], this.center[1], this.radius, this.start, this.end, true);\n      ctx.lineWidth = 10;\n    } else {\n      ctx.arc(this.center[0], this.center[1], this.radius, this.start, this.end, true);\n      ctx.lineWidth = 10;\n    }\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n  }\n}\n\nmodule.exports = Arc;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/arc.js\n// module id = 5\n// module chunks = 0","const Util = {\n  pointOnCircle(center, radius, angle) {\n    const x = center[0] + radius * Math.cos(angle);\n    const y = center[1] + radius * Math.sin(angle);\n    return [x, y];\n  },\n\n  edgeDetection(x, y) {\n    const delta = 5;\n    if (x <= y + delta && x >= y - delta) return true;\n  },\n  colors() {\n    return {\n      'blue': '#35E2F2',\n      'purple': '#8D13FC',\n      'green': '#FF0181',\n      'yellow': '#F5DF0F'\n    };\n  },\n  colorsToArray() {\n    return Object.values(Util.colors());\n  },\n  distance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow((y2 - y1), 2) + Math.pow((x2 - x1), 2));\n  }\n};\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 6\n// module chunks = 0","const Line = require('./line');\nconst Util = require('./util');\nconst Obstacle = require('./obstacle');\n\nclass Rectangle extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n    this.radius = 100;\n    this.counter = 0;\n    this.lines = [\n      this.createLine(0, Math.PI/2, Util.colors().blue),\n      this.createLine(Math.PI/2, Math.PI, Util.colors().purple),\n      this.createLine(Math.PI, 3*Math.PI/2, Util.colors().green),\n      this.createLine(3*Math.PI/2, 2*Math.PI, Util.colors().yellow)\n    ];\n  }\n\n  draw(ctx) {\n    this.lines.forEach((line) => {\n      line.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = Rectangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rectangle.js\n// module id = 7\n// module chunks = 0","const Util = require('./util');\n\nclass Line {\n  constructor(x, y, radius, start, end, color, angle) {\n    this.center = [x, y];\n    this.radius = radius;\n    // arc angles\n    this.start = start;\n    this.end = end;\n    this.color = color;\n    this.rotatingAngle = angle;\n    this.calculateStart();\n  }\n\n  rotate() {\n    this.start += this.rotatingAngle;\n    this.end += this.rotatingAngle;\n  }\n\n  collision(player) {\n    const start = this.start % (2*Math.PI);\n    const circle = player;\n\n    const theta = (this.start/2 + this.end/2) % (2*Math.PI)\n    const rect = {\n      rotation: (Math.PI/2 - theta) % (2*Math.PI),\n      width: Util.distance(this.startX, this.startY, this.endX, this.endY),\n      height:10,\n      x: (this.endX + this.startX)/2,\n      y: (this.endY + this.startY)/2\n    };\n\n    if (this.collideCircleWithRotatedRectangle(circle, rect) &&\n        this.color !== player.color) {\n      return true;\n    }\n    return false;\n  }\n\n  collideCircleWithRotatedRectangle(circle, rect) {\n\n  \tvar rectCenterX = rect.x;\n  \tvar rectCenterY = rect.y;\n\n  \tvar rectX = rectCenterX - rect.width / 2;\n  \tvar rectY = rectCenterY - rect.height / 2;\n\n  \tvar rectReferenceX = rectX;\n  \tvar rectReferenceY = rectY;\n\n  \t// Rotate circle's center point back\n  \tvar unrotatedCircleX = Math.cos( rect.rotation ) * ( circle.x - rectCenterX ) - Math.sin( rect.rotation ) * ( circle.y - rectCenterY ) + rectCenterX;\n  \tvar unrotatedCircleY = Math.sin( rect.rotation ) * ( circle.x - rectCenterX ) + Math.cos( rect.rotation ) * ( circle.y - rectCenterY ) + rectCenterY;\n\n  \t// Closest point in the rectangle to the center of circle rotated backwards(unrotated)\n  \tvar closestX, closestY;\n\n  \t// Find the unrotated closest x point from center of unrotated circle\n  \tif ( unrotatedCircleX < rectReferenceX ) {\n  \t\tclosestX = rectReferenceX;\n  \t} else if ( unrotatedCircleX > rectReferenceX + rect.width ) {\n  \t\tclosestX = rectReferenceX + rect.width;\n  \t} else {\n  \t\tclosestX = unrotatedCircleX;\n  \t}\n\n  \t// Find the unrotated closest y point from center of unrotated circle\n  \tif ( unrotatedCircleY < rectReferenceY ) {\n  \t\tclosestY = rectReferenceY;\n  \t} else if ( unrotatedCircleY > rectReferenceY + rect.height ) {\n  \t\tclosestY = rectReferenceY + rect.height;\n  \t} else {\n  \t\tclosestY = unrotatedCircleY;\n  \t}\n\n  \t// Determine collision\n  \tvar collision = false;\n  \tvar distance = this.getDistance( unrotatedCircleX, unrotatedCircleY, closestX, closestY );\n\n  \tif ( distance < circle.radius ) {\n  \t\tcollision = true;\n  \t}\n  \telse {\n  \t\tcollision = false;\n  \t}\n\n  \treturn collision;\n  }\n\n  getDistance( fromX, fromY, toX, toY ) {\n  \tvar dX = Math.abs( fromX - toX );\n  \tvar dY = Math.abs( fromY - toY );\n\n  \treturn Math.sqrt( ( dX * dX ) + ( dY * dY ) );\n  }\n\n  calculateStart() {\n    this.startX = this.center[0] + this.radius * Math.cos(this.start);\n    this.startY = this.center[1] + this.radius * Math.sin(this.start);\n    this.endX = this.center[0] + this.radius * Math.cos(this.end);\n    this.endY = this.center[1] + this.radius * Math.sin(this.end);\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(this.startX, this.startY);\n    ctx.lineTo(this.endX, this.endY);\n    ctx.closePath();\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = 10;\n    ctx.stroke();\n  }\n}\n\nmodule.exports = Line;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/line.js\n// module id = 8\n// module chunks = 0","const Arc = require('./arc');\nconst Util = require('./util');\nconst Obstacle = require('./obstacle');\n\nclass Circle extends Obstacle {\n  constructor(centerX, centerY, radius, spinner, angle) {\n    super(centerX, centerY, radius, angle);\n    this.spinner = spinner;\n    if (angle) {\n      this.rotatingAngle = angle;\n    }\n    this.arcs = [\n      this.createArc(Math.PI/4, 7*Math.PI/4, Util.colors().blue),\n      this.createArc(7*Math.PI/4, 5*Math.PI/4, Util.colors().purple),\n      this.createArc(5*Math.PI/4, 3*Math.PI/4, Util.colors().green),\n      this.createArc(3*Math.PI/4, Math.PI/4, Util.colors().yellow),\n    ];\n  }\n\n  createArc(start, end, color) {\n    return new Arc(this.x, this.y, this.radius, start, end, color, this.rotatingAngle);\n  }\n\n  draw(ctx) {\n    this.arcs.forEach((arc) => {\n      arc.draw(ctx, this.spinner);\n    });\n  }\n}\n\nmodule.exports = Circle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/circle.js\n// module id = 9\n// module chunks = 0","const Obstacle = require('./obstacle');\nconst Line = require('./line');\nconst Util = require('./util');\n\nclass Triangle extends Obstacle {\n  constructor(centerX, centerY, radius, color) {\n    super(centerX, centerY, radius);\n    this.radius = 100;\n    this.playerColor = color;\n    this.selectedColors = this.selectRandomColors();\n    this.lines = [\n      this.createLine(0, 2*Math.PI/3, this.selectedColors[0]),\n      this.createLine(2*Math.PI/3, 4*Math.PI/3, this.selectedColors[1]),\n      this.createLine(4*Math.PI/3, 2*Math.PI, this.selectedColors[2])\n    ];\n  }\n\n  selectRandomColors() {\n    const colors = Object.values(Util.colors());\n    const playerIdx = colors.indexOf(this.playerColor);\n    colors.splice(playerIdx, 1);\n    return colors;\n  }\n\n  draw(ctx) {\n    this.lines.forEach((line) => {\n      line.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = Triangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/triangle.js\n// module id = 10\n// module chunks = 0","const Util = require('./util');\nconst Arc = require('./arc');\nconst Obstacle = require('./obstacle');\n\nclass ColorSpinner extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n    this.radius = 5;\n    this.arcs = [\n      new Arc(this.x, this.y, this.radius, 0, 3*Math.PI/2, Util.colors().blue),\n      new Arc(this.x, this.y, this.radius, 3*Math.PI/2, Math.PI, Util.colors().purple),\n      new Arc(this.x, this.y, this.radius, Math.PI, Math.PI/2, Util.colors().green),\n      new Arc(this.x, this.y, this.radius, Math.PI/2, 0, Util.colors().yellow)\n    ];\n  }\n\n  draw(ctx) {\n    this.arcs.forEach((arc) => {\n      arc.draw(ctx, true);\n    });\n  }\n}\n\nmodule.exports = ColorSpinner;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/color_spinner.js\n// module id = 11\n// module chunks = 0","const Obstacle = require('./obstacle');\n\nclass Star extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n    this.image = new Image();\n    this.length = 30;\n    this.angle = 0;\n  }\n\n  rotate(ctx) {\n    const offset = this.length / 2;\n    ctx.save();\n    ctx.translate(this.x, this.y);\n    this.angle -= this.rotatingAngle;\n    ctx.rotate(this.angle);\n    ctx.drawImage(this.image, -offset, -offset, this.length, this.length);\n    ctx.restore();\n  }\n\n  collision(player) {\n    if (player.y <= (this.y + this.length/2) &&\n        player.y >= (this.y - this.length/2)) {\n          return true;\n    }\n    return false;\n  }\n\n  draw(ctx) {\n    ctx.save();\n    this.image.src = './images/star.png';\n    this.rotate(ctx);\n    ctx.restore();\n  }\n}\n\nmodule.exports = Star;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/star.js\n// module id = 12\n// module chunks = 0","const Circle = require('./circle');\nconst Obstacle = require('./obstacle');\nconst Util = require('./util');\n\nclass DoubleCircle extends Obstacle {\n  constructor(centerX, centerY, radius, color) {\n    super(centerX, centerY, radius);\n    this.playerColor = color;\n    const angle = -this.rotatingAngle;\n    const firstCircle = new Circle(this.x, this.y, this.radius);\n    const secondCircle = new Circle(this.x, this.y, this.radius + 20, false, angle);\n    this.arcs = firstCircle.arcs.concat(secondCircle.arcs);\n  }\n\n  draw(ctx) {\n    this.arcs.forEach((arc) => {\n      arc.rotate();\n      arc.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = DoubleCircle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/double_circle.js\n// module id = 13\n// module chunks = 0","const Obstacle = require('./obstacle');\nconst Util = require('./util');\nconst Line = require('./line');\n\nclass LineObstacle extends Obstacle {\n  constructor(centerX, centerY, radius) {\n    super(centerX, centerY, radius);\n    this.lineWidth = this.radius;\n    this.lines = [\n      this.createLine(this.x, this.y, Util.colors().blue),\n      this.createLine(this.x - 2*this.lineWidth, this.y, Util.colors().purple),\n      this.createLine(this.x + 2*this.lineWidth, this.y, Util.colors().green),\n      this.createLine(this.x + 4*this.lineWidth, this.y, Util.colors().yellow),\n    ];\n\n    this.move = this.move.bind(this);\n  }\n\n  createLine(x, y, color) {\n    return new Line(x, y, this.radius, 0, Math.PI, color);\n  }\n\n  shift(player) {\n    this.lines.forEach((line) => {\n      line.center[1] += player.moveVel * 0.8;\n      if (line.center[0] + this.lineWidth < 0) {\n        line.center[0] = 700\n      }\n    });\n  }\n\n  move() {\n    this.lines.forEach((line) => {\n      line.center[0] -= 3;\n      line.calculateStart();\n    });\n  }\n\n  shift(player) {\n    this.lines.forEach((line) => {\n      line.center[1] += player.moveVel * 0.8;\n    });\n  };\n\n  draw(ctx) {\n    this.lines.forEach((line) => {\n      line.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = LineObstacle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/line_obstacle.js\n// module id = 14\n// module chunks = 0"],"sourceRoot":""}
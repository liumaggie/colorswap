{"version":3,"sources":["webpack:///webpack/bootstrap 0c5376539c80d7dda651","webpack:///./lib/colorswap.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/player.js","webpack:///./lib/obstacle.js","webpack:///./lib/arc.js","webpack:///./lib/util.js","webpack:///./lib/rectangle.js","webpack:///./lib/line.js","webpack:///./lib/circle.js","webpack:///./lib/triangle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;ACTD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;ACpHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACnCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;;;;;;;ACzBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AC/BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,qDAAqD,cAAc;AACnE;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACpHA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;AChCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0c5376539c80d7dda651","const Game = require('./game');\nconst GameView = require('./game_view');\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvas = document.getElementById(\"game-canvas\");\n\n  const ctx = canvas.getContext(\"2d\");\n  const game = new Game();\n  new GameView(game, ctx).start();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/colorswap.js\n// module id = 0\n// module chunks = 0","const Player = require('./player');\nconst Obstacle = require('./obstacle');\nconst Rectangle = require('./rectangle');\nconst Circle = require('./circle');\nconst Triangle = require('./triangle');\n\nclass Game {\n  constructor() {\n    this.player = new Player(Game.width, Game.height);\n    // this.obstacles = [ new Circle(Game.width/2, Game.height - 2*Game.height/3) ];\n    this.obstacles = [ new Rectangle(Game.width/2, Game.height - 2*Game.height/3) ];\n    this.collided = this.collided.bind(this);\n    this.collideWithCircle = this.collideWithCircle.bind(this);\n    this.inObstacle = this.inObstacle.bind(this);\n    this.isOutOfObstacle = this.isOutOfObstacle.bind(this);\n    this.outOfObstacle = false;\n  }\n\n  inObstacle() {\n    for(let i=0; i < this.obstacles.length; i++) {\n      if (this.obstacles[i].y - this.obstacles[i].radius < this.player.y &&\n        this.player.y < this.obstacles[i].y + this.obstacles[i].radius) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isOutOfObstacle(obstacle) {\n    if (this.player.y < obstacle.y - obstacle.radius) {\n      return true;\n    }\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, Game.width, Game.height);\n    this.obstacles.forEach((obstacle) => {\n      if (this.player.y < Game.height/2 &&\n          this.player.y > Game.height/2 - 50) {\n            obstacle.shift();\n          }\n      else if (this.player.y < Game.height/2 &&\n              this.player.y > Game.height/2 - 50) {\n                obstacle.shift();\n              }\n      else if (this.isOutOfObstacle(obstacle) && this.obstacles.length <= 2) {\n        // this.addObstacle();\n      }\n      obstacle.draw(ctx);\n    });\n    // this.removeObstacle();\n    this.player.draw(ctx);\n  }\n\n  addObstacle() {\n    this.obstacles.push(new Circle(Game.width/2, 0));\n  }\n\n  removeObstacle() {\n    this.obstacles.forEach((obstacle) => {\n      if (obstacle.y >= Game.height - Game.height/5) {\n        this.obstacles.shift();\n      }\n    });\n  }\n\n  collided() {\n    let collided;\n    let that = this;\n    this.obstacles.forEach((obstacle) => {\n      if (obstacle instanceof Circle) {\n        if (that.collideWithCircle(obstacle)) {\n          console.log('collided');\n        }\n      } else if (obstacle instanceof Rectangle || obstacle instanceof Triangle) {\n        if (that.collideWith(obstacle)) {\n          console.log('collided');\n        }\n      }\n    });\n    return collided;\n  }\n\n  collideWith(obstacle) {\n    let collided;\n    obstacle.lines.forEach((line) => {\n      if (line.collision(this.player)) {\n        collided = true;\n      }\n    });\n    return collided;\n  }\n\n  collideWithCircle(circleObstacle) {\n    let collided;\n    circleObstacle.arcs.forEach((arc) => {\n      if (arc.collision(this.player)) {\n        collided = true;\n      }\n    });\n    return collided;\n  }\n\n  playerFall(time) {\n    if (this.player.falling) {\n      this.player.fall(time);\n    }\n  }\n\n}\n\nGame.width = 600;\nGame.height = 700;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","class GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n  }\n\n  start() {\n    this.elapsedTime = 0;\n    this.movePlayer();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  movePlayer() {\n    this.ctx.canvas.addEventListener(\"mousedown\", () => {\n      this.game.player.move();\n    });\n  }\n\n  animate(time) {\n    const timeDelta = time - this.elapsedTime;\n    this.game.draw(this.ctx);\n    this.game.collided();\n    this.game.playerFall(timeDelta);\n    this.elapsedTime = time;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 2\n// module chunks = 0","class Player {\n  constructor(width, height) {\n    this.gameWidth = width;\n    this.gameHeight = height;\n    // initial position of player\n    this.x = this.gameWidth/2;\n    this.y = this.gameHeight-this.gameHeight/5;\n    this.radius = 10;\n    this.velocity = 1.5;\n    this.falling = false;\n    this.deltaY = 60;\n    this.color = \"#b0e5f6\";\n  }\n\n  fall(time) {\n    this.y = (this.velocity * time/(1000/60)) + this.y;\n    if (this.y >= this.gameHeight-this.gameHeight/5) {\n      this.falling = false;\n    }\n  }\n\n  move() {\n    this.y = this.y - this.deltaY;\n    this.falling = true;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);\n    ctx.fillStyle = \"#b0e5f6\";\n    ctx.fill();\n  }\n\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 3\n// module chunks = 0","const Arc = require('./arc');\nconst Util = require('./util');\n\nclass Obstacle {\n  constructor(centerX, centerY) {\n    this.x = centerX;\n    this.y = centerY;\n    this.radius = 100;\n  }\n\n  shift() {\n    this.y += 3;\n    // this.arcs.forEach((arc) => {\n    //   arc.center = [this.x, this.y];\n    // });\n  }\n\n  // draw(ctx) {\n  //   this.arcs.forEach((arc) => {\n  //     arc.rotate();\n  //     arc.draw(ctx);\n  //   });\n  // }\n}\n\nmodule.exports = Obstacle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/obstacle.js\n// module id = 4\n// module chunks = 0","const Util = require('./util');\n\nclass Arc {\n  constructor(x, y, radius, start, end, color) {\n    this.center = [x, y];\n    this.radius = radius;\n    // arc angles\n    this.start = start;\n    this.end = end;\n    this.color = color;\n    // y coordinate at bottom of circle\n  }\n\n  edgeDetection(playerYTop, playerYBottom, circleY) {\n    return (Util.edgeDetection(playerYTop, circleY) ||\n        Util.edgeDetection(playerYBottom, circleY));\n  }\n\n  checkCollision(angle, circleY, player) {\n    // arc positions\n    this.adjustedStart = this.start % (2*Math.PI);\n    this.adjustedEnd = this.end % (2*Math.PI);\n\n    const playerYTopCoord = player.y - player.radius;\n    const playerYBottomCoord = player.y + player.radius;\n\n    if (this.adjustedStart > angle && angle > this.adjustedEnd &&\n      this.color !== player.color &&\n      this.edgeDetection(playerYTopCoord, playerYBottomCoord, circleY)) {\n        return true;\n      }\n  }\n\n  collision(player) {\n    // y coordinate collision with player\n    this.yAtCircleBottom = Util.pointOnCircle(this.center, this.radius, Math.PI/2)[1];\n    this.yAtCircleTop = Util.pointOnCircle(this.center, this.radius, 3*Math.PI/2)[1];\n\n    // checks for top and bottom collision\n    if (this.checkCollision(3*Math.PI/2, this.yAtCircleTop, player) ||\n      (this.checkCollision(Math.PI/2, this.yAtCircleBottom, player))) {\n        return true;\n      }\n    return false;\n  }\n\n  rotate() {\n    this.start += 0.01;\n    this.end += 0.01;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.center[0], this.center[1], this.radius, this.start, this.end, true);\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = 10;\n    ctx.stroke();\n  }\n}\n\nmodule.exports = Arc;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/arc.js\n// module id = 5\n// module chunks = 0","const Util = {\n  pointOnCircle(center, radius, angle) {\n    const x = center[0] + radius * Math.cos(angle);\n    const y = center[1] + radius * Math.sin(angle);\n    return [x, y];\n  },\n\n  edgeDetection(x, y) {\n    const delta = 5;\n    if (x <= y + delta && x >= y - delta) return true;\n  },\n\n  colors() {\n    return {\n      'blue': '#b0e5f6',\n      'purple': '#baade6',\n      'green': '#8ae1c0',\n      'yellow': '#f3f485'\n    };\n  },\n  pointOnSquare(start, end, center) {\n    const x1 = center[0];\n\n    // find slope of current line\n    const m = (end[1] - start[1]) / (end[0] - start[0]);\n    // find intercept of current line\n    const b = -(m * start[0]) + start[1];\n    // find intersecting point\n    const y1 = m * x1 + b;\n    return [x1, y1];\n  },\n  distance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow((y2 - y2), 2) + Math.pow((x2 - x1), 2));\n  }\n};\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 6\n// module chunks = 0","const Line = require('./line');\nconst Util = require('./util');\nconst Obstacle = require('./obstacle');\n\nclass Rectangle extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n    // this.x = centerX;\n    // this.y = centerY;\n    this.radius = 100;\n    this.counter = 0;\n    this.lines = [\n      new Line(this.x, this.y, this.radius, 0, 3*Math.PI/2, Util.colors().blue),\n      new Line(this.x, this.y, this.radius, 3*Math.PI/2, Math.PI, Util.colors().purple),\n      new Line(this.x, this.y, this.radius, Math.PI, Math.PI/2, Util.colors().green),\n      new Line(this.x, this.y, this.radius, Math.PI/2, 0, Util.colors().yellow)\n    ];\n  }\n\n\n  draw(ctx) {\n    // this.counter += 1;\n    // if (this.counter % 1000 === 0) { debugger }\n    this.lines.forEach((line) => {\n      line.rotate();\n      line.calculateStart();\n      line.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = Rectangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rectangle.js\n// module id = 7\n// module chunks = 0","const Util = require('./util');\n\nclass Line {\n  constructor(x, y, radius, start, end, color) {\n    this.center = [x, y];\n    this.radius = radius;\n    // arc angles\n    this.start = start;\n    this.end = end;\n    this.color = color;\n    this.counter = 0;\n    this.calculateStart();\n  }\n\n  rotate() {\n    this.start += 0.01;\n    this.end += 0.01;\n  }\n\n  // collision(player) {\n  //   const start = [this.startX, this.startY];\n  //   const end = [this.endX, this.endY];\n  //   const point = Util.pointOnSquare(start, end, this.center);\n  //   // debugger\n  //   if (this.startX < point[0] && point[0] < this.endX &&\n  //       this.startY < point[1] && point[1] < this.endY &&\n  //       this.color !== player.color) {\n  //         return true;\n  //       }\n  // }\n  // collision(player) {\n  //   // this.counter = 0\n  //   const height = 10;\n  //   const width = Util.distance(this.startX, this.startY, this.endX, this.endY);\n  //   const squareTop = Math.abs(this.endY - this.startY) / 2;\n  //   const squareLeft = Math.abs(this.endX - this.startX)/2;\n  //   this.counter += 1\n  //   // this.checkCollision(player, width, height);\n  //   // calculates distance between circle and square\n  //   const distanceX = Math.abs(player.x - player.radius - squareLeft);\n  //   const distanceY = Math.abs(player.y - player.radius - squareTop);\n  //   if (distanceX >= (width/2 + player.radius)) {\n  //     return false; }\n  //   if (distanceY >= (height/2 + player.radius)) { return false; }\n  //   if (distanceY <= height/2 && player.color !== this.color) {\n  //     // console.log('collide', distanceY);\n  //     // debugger\n  //     return true; }\n  //\n  //   const cornerDistance = (Math.pow((distanceX - width/2), 2) +\n  //                           Math.pow((distanceY - height/2), 2));\n  //   return (cornerDistance >= Math.pow(player.radius, 2) && player.color !== this.color );\n  // }\n  collision(player) {\n    const height = 10;\n    const width = Util.distance(this.startX, this.startY, this.endX, this.endY);\n    const rectCenterX = this.endX + ((this.startX - this.endX)/2);\n    const rectCenterY = this.endY + ((this.startY - this.endY)/2);\n\n    const rectLeft = rectCenterX - width/2;\n    const rectTop = rectCenterY - height/2;\n\n    const unrotatedCircleX = Math.cos(Math.PI/2) * (player.x - rectCenterX) - Math.sin(Math.PI/2)*(player.y - rectCenterY) + rectCenterX\n    const unrotatedCircleY = Math.sin(Math.PI/2) * (player.x - rectCenterX) + Math.cos(Math.PI/2)*(player.y - rectCenterY) + rectCenterY\n    let closestX, closestY;\n  \t// Find the unrotated closest x point from center of unrotated circle\n  \tif ( unrotatedCircleX < rectLeft ) {\n  \t\tclosestX = rectLeft;\n  \t} else if ( unrotatedCircleX > rectLeft + width ) {\n  \t\tclosestX = rectLeft + width;\n  \t} else {\n  \t\tclosestX = unrotatedCircleX;\n  \t}\n\n  \t// Find the unrotated closest y point from center of unrotated circle\n  \tif ( unrotatedCircleY < rectTop ) {\n  \t\tclosestY = rectTop;\n  \t} else if ( unrotatedCircleY > rectTop + height ) {\n  \t\tclosestY = rectTop + height;\n  \t} else {\n  \t\tclosestY = unrotatedCircleY;\n  \t}\n\n  \t// Determine collision\n  \tvar collision = false;\n  \tvar distance = Util.distance( unrotatedCircleX, unrotatedCircleY, closestX, closestY );\n\n  \tif ( distance < player.radius && this.color !== player.color) {\n  \t\tcollision = true;\n  \t}\n  \telse {\n  \t\tcollision = false;\n  \t}\n\n  \treturn collision;\n  }\n\n  calculateStart() {\n    this.startX = this.center[0] + this.radius * Math.cos(this.start);\n    this.startY = this.center[1] + this.radius * Math.sin(this.start);\n    this.endX = this.center[0] + this.radius * Math.cos(this.end);\n    this.endY = this.center[1] + this.radius * Math.sin(this.end);\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(this.startX, this.startY);\n    ctx.lineTo(this.endX, this.endY);\n    ctx.closePath();\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = 10;\n    ctx.stroke();\n\n  }\n}\n\nmodule.exports = Line;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/line.js\n// module id = 8\n// module chunks = 0","const Arc = require('./arc');\nconst Util = require('./util');\nconst Obstacle = require('./obstacle');\n\nclass Circle extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n\n    this.arcs = [\n      new Arc(this.x, this.y, this.radius, 0, 3*Math.PI/2, Util.colors().blue),\n      new Arc(this.x, this.y, this.radius, 3*Math.PI/2, Math.PI, Util.colors().purple),\n      new Arc(this.x, this.y, this.radius, Math.PI, Math.PI/2, Util.colors().green),\n      new Arc(this.x, this.y, this.radius, Math.PI/2, 0, Util.colors().yellow)\n    ];\n\n  }\n\n  shift() {\n    this.y += 3;\n    this.arcs.forEach((arc) => {\n      arc.center = [this.x, this.y];\n    });\n  }\n\n  draw(ctx) {\n    this.arcs.forEach((arc) => {\n      arc.rotate();\n      arc.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = Circle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/circle.js\n// module id = 9\n// module chunks = 0","const Obstacle = require('./obstacle');\nconst Line = require('./line');\nconst Util = require('./util');\n\nclass Triangle extends Obstacle {\n  constructor(centerX, centerY) {\n    super(centerX, centerY);\n    this.radius = 100;\n\n    this.lines = [\n      new Line(this.x, this.y, this.radius, 0, 2*Math.PI/3, Util.colors().blue),\n      new Line(this.x, this.y, this.radius, 2*Math.PI/3, 4*Math.PI/3, Util.colors().purple),\n      new Line(this.x, this.y, this.radius, 4*Math.PI/3, 0, Util.colors().green),\n    ]\n  }\n\n  draw(ctx) {\n    this.lines.forEach((line) => {\n      line.rotate();\n      line.calculateStart();\n      line.draw(ctx);\n    });\n  }\n}\n\nmodule.exports = Triangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/triangle.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}